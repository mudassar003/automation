import { Invoice, InvoiceItem } from '@/types/invoice';

// Mock invoice data for development
export const mockInvoices: Invoice[] = [
  {
    id: '1',
    user_id: 'user-1',
    created_at: '2025-01-17T10:00:00Z',
    updated_at: '2025-01-17T10:00:00Z',
    mx_invoice_id: 10162821,
    invoice_number: 2414,
    customer_name: 'Mustapha Deen',
    customer_number: '',
    invoice_date: '2025-01-17',
    due_date: '2025-01-17',
    api_created: '2025-01-17T10:02:30.44Z',
    status: 'Paid',
    subtotal_amount: 50.00,
    tax_amount: 0.00,
    discount_amount: 0.00,
    total_amount: 50.00,
    balance: 0.00,
    paid_amount: 50.00,
    currency: 'USD',
    receipt_number: '05IWS3QBFYXO',
    quantity: 1,
    return_quantity: 0,
    return_status: 'None',
    source_type: 'Recurring',
    type: 'Sale',
    terms: 'Custom',
    memo: '',
    is_tax_exempt: false,
    merchant_id: 1000095245,
    raw_data: {},
    data_sent_status: 'pending',
    data_sent_by: undefined,
    data_sent_at: undefined,
    data_sent_notes: undefined,
  },
  {
    id: '2',
    user_id: 'user-1',
    created_at: '2025-01-17T10:00:00Z',
    updated_at: '2025-01-17T10:00:00Z',
    mx_invoice_id: 10162820,
    invoice_number: 2413,
    customer_name: 'Nicholas Hayden',
    customer_number: '',
    invoice_date: '2025-01-17',
    due_date: '2025-01-17',
    api_created: '2025-01-17T10:02:30.03Z',
    status: 'Paid',
    subtotal_amount: 199.00,
    tax_amount: 0.00,
    discount_amount: 0.00,
    total_amount: 199.00,
    balance: 0.00,
    paid_amount: 199.00,
    currency: 'USD',
    receipt_number: '05IWS3QBFYME',
    quantity: 1,
    return_quantity: 0,
    return_status: 'None',
    source_type: 'Recurring',
    type: 'Sale',
    terms: 'Custom',
    memo: '',
    is_tax_exempt: false,
    merchant_id: 1000095245,
    raw_data: {},
    data_sent_status: 'yes',
    data_sent_by: 'nurse-1',
    data_sent_at: '2025-01-17T11:00:00Z',
    data_sent_notes: 'Data sent via email',
  },
  {
    id: '3',
    user_id: 'user-1',
    created_at: '2025-01-17T10:00:00Z',
    updated_at: '2025-01-17T10:00:00Z',
    mx_invoice_id: 10162817,
    invoice_number: 2412,
    customer_name: 'Kelly Staats',
    customer_number: '',
    invoice_date: '2025-01-17',
    due_date: '2025-01-17',
    api_created: '2025-01-17T10:02:28.8Z',
    status: 'Unpaid',
    subtotal_amount: 175.00,
    tax_amount: 0.00,
    discount_amount: 0.00,
    total_amount: 175.00,
    balance: 175.00,
    paid_amount: 0.00,
    currency: 'USD',
    receipt_number: '05IWS3QBFX5P',
    quantity: 1,
    return_quantity: 0,
    return_status: 'None',
    source_type: 'Recurring',
    type: 'Sale',
    terms: 'None',
    memo: '',
    is_tax_exempt: false,
    merchant_id: 1000095245,
    raw_data: {},
    data_sent_status: 'no',
    data_sent_by: 'nurse-2',
    data_sent_at: '2025-01-17T12:00:00Z',
    data_sent_notes: 'Patient not contacted yet',
  },
  {
    id: '4',
    user_id: 'user-1',
    created_at: '2025-01-17T10:00:00Z',
    updated_at: '2025-01-17T10:00:00Z',
    mx_invoice_id: 10162814,
    invoice_number: 2411,
    customer_name: 'Robert McCoy',
    customer_number: 'CUST-001',
    invoice_date: '2025-01-17',
    due_date: '2025-01-17',
    api_created: '2025-01-17T10:02:20.757Z',
    status: 'Paid',
    subtotal_amount: 275.00,
    tax_amount: 0.00,
    discount_amount: 0.00,
    total_amount: 275.00,
    balance: 0.00,
    paid_amount: 275.00,
    currency: 'USD',
    receipt_number: '05IWS3QBFRGE',
    quantity: 2,
    return_quantity: 0,
    return_status: 'None',
    source_type: 'Recurring',
    type: 'Sale',
    terms: 'None',
    memo: '',
    is_tax_exempt: false,
    merchant_id: 1000095245,
    raw_data: {},
    data_sent_status: 'pending',
    data_sent_by: undefined,
    data_sent_at: undefined,
    data_sent_notes: undefined,
  },
  {
    id: '5',
    user_id: 'user-1',
    created_at: '2025-01-17T10:00:00Z',
    updated_at: '2025-01-17T10:00:00Z',
    mx_invoice_id: 10162780,
    invoice_number: 2410,
    customer_name: 'Anthony Roy',
    customer_number: '',
    invoice_date: '2025-01-17',
    due_date: '2025-01-17',
    api_created: '2025-01-17T10:02:17.997Z',
    status: 'Paid',
    subtotal_amount: 225.00,
    tax_amount: 0.00,
    discount_amount: 0.00,
    total_amount: 225.00,
    balance: 0.00,
    paid_amount: 225.00,
    currency: 'USD',
    receipt_number: '05IWS3QBFPBZ',
    quantity: 2,
    return_quantity: 0,
    return_status: 'None',
    source_type: 'Recurring',
    type: 'Sale',
    terms: 'OnReceipt',
    memo: '',
    is_tax_exempt: false,
    merchant_id: 1000095245,
    raw_data: {},
    data_sent_status: 'yes',
    data_sent_by: 'nurse-1',
    data_sent_at: '2025-01-17T13:00:00Z',
    data_sent_notes: 'Data sent successfully',
  },
];

export const mockInvoiceItems: InvoiceItem[] = [
  {
    id: '1',
    invoice_id: '1',
    mx_purchase_id: 9664236,
    product_name: 'Plus Enclomiphene Subscription',
    quantity: 1,
    unit_price: 50.00,
    subtotal_amount: 50.00,
    tax_amount: 0.00,
    discount_amount: 0.00,
    price_discount_amount: 0.00,
    total_amount: 50.00,
    quantity_returned: 0,
    tracking_number: 0,
    api_created: '2025-01-17T10:02:30.797Z',
    created_at: '2025-01-17T10:00:00Z',
  },
  {
    id: '2',
    invoice_id: '2',
    mx_purchase_id: 9664237,
    product_name: 'Testosterone Cypionate Subscription',
    quantity: 1,
    unit_price: 199.00,
    subtotal_amount: 199.00,
    tax_amount: 0.00,
    discount_amount: 0.00,
    price_discount_amount: 0.00,
    total_amount: 199.00,
    quantity_returned: 0,
    tracking_number: 0,
    api_created: '2025-01-17T10:02:30.03Z',
    created_at: '2025-01-17T10:00:00Z',
  },
  {
    id: '3',
    invoice_id: '3',
    mx_purchase_id: 9664238,
    product_name: 'Basic Health Package',
    quantity: 1,
    unit_price: 175.00,
    subtotal_amount: 175.00,
    tax_amount: 0.00,
    discount_amount: 0.00,
    price_discount_amount: 0.00,
    total_amount: 175.00,
    quantity_returned: 0,
    tracking_number: 0,
    api_created: '2025-01-17T10:02:28.8Z',
    created_at: '2025-01-17T10:00:00Z',
  },
  {
    id: '4a',
    invoice_id: '4',
    mx_purchase_id: 9664239,
    product_name: 'Vitamin D3 Supplement',
    quantity: 1,
    unit_price: 125.00,
    subtotal_amount: 125.00,
    tax_amount: 0.00,
    discount_amount: 0.00,
    price_discount_amount: 0.00,
    total_amount: 125.00,
    quantity_returned: 0,
    tracking_number: 0,
    api_created: '2025-01-17T10:02:20.757Z',
    created_at: '2025-01-17T10:00:00Z',
  },
  {
    id: '4b',
    invoice_id: '4',
    mx_purchase_id: 9664240,
    product_name: 'Testosterone Booster',
    quantity: 1,
    unit_price: 150.00,
    subtotal_amount: 150.00,
    tax_amount: 0.00,
    discount_amount: 0.00,
    price_discount_amount: 0.00,
    total_amount: 150.00,
    quantity_returned: 0,
    tracking_number: 0,
    api_created: '2025-01-17T10:02:20.757Z',
    created_at: '2025-01-17T10:00:00Z',
  },
  {
    id: '5a',
    invoice_id: '5',
    mx_purchase_id: 9664241,
    product_name: 'Blood Panel Test',
    quantity: 1,
    unit_price: 125.00,
    subtotal_amount: 125.00,
    tax_amount: 0.00,
    discount_amount: 0.00,
    price_discount_amount: 0.00,
    total_amount: 125.00,
    quantity_returned: 0,
    tracking_number: 0,
    api_created: '2025-01-17T10:02:17.997Z',
    created_at: '2025-01-17T10:00:00Z',
  },
  {
    id: '5b',
    invoice_id: '5',
    mx_purchase_id: 9664242,
    product_name: 'Consultation Fee',
    quantity: 1,
    unit_price: 100.00,
    subtotal_amount: 100.00,
    tax_amount: 0.00,
    discount_amount: 0.00,
    price_discount_amount: 0.00,
    total_amount: 100.00,
    quantity_returned: 0,
    tracking_number: 0,
    api_created: '2025-01-17T10:02:17.997Z',
    created_at: '2025-01-17T10:00:00Z',
  },
];

// Helper function to get invoice items for a specific invoice
export const getInvoiceItems = (invoiceId: string): InvoiceItem[] => {
  return mockInvoiceItems.filter(item => item.invoice_id === invoiceId);
};

// Helper function to get product summary for an invoice
export const getProductSummary = (invoiceId: string): string => {
  const items = getInvoiceItems(invoiceId);
  if (items.length === 0) return 'No products';
  
  const summaries = items.map(item => `${item.quantity}x ${item.product_name}`);
  return summaries.join(', ');
};

// Helper function to get simple product count
export const getProductCount = (invoiceId: string): string => {
  const items = getInvoiceItems(invoiceId);
  const totalItems = items.reduce((sum, item) => sum + item.quantity, 0);
  return totalItems === 1 ? '1 item' : `${totalItems} items`;
};